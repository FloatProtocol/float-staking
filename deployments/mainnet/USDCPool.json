{
  "address": "0x73139212D0F62c6ddB6514C6a55c3778EB798D72",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardDistribution",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_whitelist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maximumContribution",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISTRIBUTION_ASSIGNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECOVER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumContribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDistribution",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardDistribution",
          "type": "address"
        }
      ],
      "name": "setRewardDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "stakeWithProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "contract IWhitelist",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4e2b39e9c5fa06862a7d51544a170ce35ba9793058439d0c70b4dd241670a27",
  "receipt": {
    "to": null,
    "from": "0x2B84260068A16B8d32fB8f5940FCE559511851f5",
    "contractAddress": "0x73139212D0F62c6ddB6514C6a55c3778EB798D72",
    "transactionIndex": 107,
    "gasUsed": "2419181",
    "logsBloom": "0x
    "blockHash": "0xc203c9a14e96e730f4dfa116f265acb36fc40c46eaacbc092f2a88f29a0becd0",
    "transactionHash": "0xb4e2b39e9c5fa06862a7d51544a170ce35ba9793058439d0c70b4dd241670a27",
    "logs": [
      {
        "transactionIndex": 107,
        "blockNumber": 11797913,
        "transactionHash": "0xb4e2b39e9c5fa06862a7d51544a170ce35ba9793058439d0c70b4dd241670a27",
        "address": "0x73139212D0F62c6ddB6514C6a55c3778EB798D72",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x32d611cddb9575a9b749d29624cab333eb23b65b17d0995589b5ce4fba0af787",
          "0x000000000000000000000000de4b9cbad10cdff96ee4b1f9c7568283e96c0089",
          "0x0000000000000000000000002b84260068a16b8d32fb8f5940fce559511851f5"
        ],
        "data": "0x",
        "logIndex": 152,
        "blockHash": "0xc203c9a14e96e730f4dfa116f265acb36fc40c46eaacbc092f2a88f29a0becd0"
      },
      {
        "transactionIndex": 107,
        "blockNumber": 11797913,
        "transactionHash": "0xb4e2b39e9c5fa06862a7d51544a170ce35ba9793058439d0c70b4dd241670a27",
        "address": "0x73139212D0F62c6ddB6514C6a55c3778EB798D72",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000de4b9cbad10cdff96ee4b1f9c7568283e96c0089",
          "0x0000000000000000000000002b84260068a16b8d32fb8f5940fce559511851f5"
        ],
        "data": "0x",
        "logIndex": 153,
        "blockHash": "0xc203c9a14e96e730f4dfa116f265acb36fc40c46eaacbc092f2a88f29a0becd0"
      },
      {
        "transactionIndex": 107,
        "blockNumber": 11797913,
        "transactionHash": "0xb4e2b39e9c5fa06862a7d51544a170ce35ba9793058439d0c70b4dd241670a27",
        "address": "0x73139212D0F62c6ddB6514C6a55c3778EB798D72",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x62b337eaefec74dadf1a62e856bf9db4f14a0f27d4f48156a95a9f98e7d5e066",
          "0x000000000000000000000000de4b9cbad10cdff96ee4b1f9c7568283e96c0089",
          "0x0000000000000000000000002b84260068a16b8d32fb8f5940fce559511851f5"
        ],
        "data": "0x",
        "logIndex": 154,
        "blockHash": "0xc203c9a14e96e730f4dfa116f265acb36fc40c46eaacbc092f2a88f29a0becd0"
      }
    ],
    "blockNumber": 11797913,
    "cumulativeGasUsed": "8423770",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdE4B9cBaD10cdFf96eE4b1f9C7568283e96C0089",
    "0x383dF49ad1f0219759a46399fE33Cb7A63cd051c",
    "0xe20B0199A86d703F98Ae7f0b3aC2802d942043Ce",
    "0x24A6A37576377F63f194Caa5F518a60f45b42921",
    "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
    "0x02540be400"
  ],
  "solcInputHash": "616d2256abf661836a9c9e5784b4a1dc",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maximumContribution\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_ASSIGNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECOVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"stakeWithProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"contract IWhitelist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_admin\":\"The default role controller for \",\"_maximumContribution\":\"The maximum contribution for this token (in the unit of the respective contract)\",\"_rewardDistribution\":\"The reward distributor (can change reward rate)\",\"_rewardToken\":\"The reward token to distribute\",\"_stakingToken\":\"The staking token used to qualify for rewards\",\"_whitelist\":\"The address of the deployed whitelist contract\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"notifyRewardAmount(uint256)\":{\"params\":{\"reward\":\"number of tokens to be distributed over the duration.\"}},\"recoverERC20(address,uint256)\":{\"details\":\"Sourced from synthetix/contracts/StakingRewards.sol\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Construct a new Phase1Pool\"},\"notifyRewardAmount(uint256)\":{\"notice\":\"Should be called after the amount of reward tokens has been sent to the contract. Reward should be divisible by duration.\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Provide accidental token retrieval. \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Phase1Pool.sol\":\"Phase1Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37ff88aa5ca8f533e31b9e1cb5354816b15bb7d41c904ea1c8f5dd5a78d6da25\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xae0992eb1ec30fd1ecdf2e04a6036decfc9797bf11dc1ec84b546b74318d5ec2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x065360ef3924db6b63c2160886b5de737497dd64a917e362dd8d857cda1f5ae2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Phase1Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./RewardDistributionRecipient.sol\\\";\\nimport \\\"./interfaces/IStakingRewardWhitelisted.sol\\\";\\nimport \\\"./Whitelisted.sol\\\";\\nimport \\\"./Phase2Pool.sol\\\";\\n\\ncontract Phase1Pool is Phase2Pool, Whitelisted, IStakingRewardWhitelisted {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /* ========== STATE VARIABLES ========== */\\n  uint256 public maximumContribution;\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  /**\\n    @notice Construct a new Phase1Pool\\n    @param _admin The default role controller for \\n    @param _rewardDistribution The reward distributor (can change reward rate)\\n    @param _whitelist The address of the deployed whitelist contract\\n    @param _rewardToken The reward token to distribute\\n    @param _stakingToken The staking token used to qualify for rewards\\n    @param _maximumContribution The maximum contribution for this token (in the unit of the respective contract)\\n   */\\n  constructor(\\n    address _admin,\\n    address _rewardDistribution,\\n    address _whitelist,\\n    address _rewardToken,\\n    address _stakingToken,\\n    uint256 _maximumContribution\\n  ) Phase2Pool(_admin, _rewardDistribution, _rewardToken, _stakingToken) {\\n    whitelist = IWhitelist(_whitelist);\\n    maximumContribution = _maximumContribution;\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n  function stake(uint256) public pure override(Phase2Pool, IStakingRewards) {\\n    revert(\\\"Phase1Pool::stake: Cannot stake on Phase1Pool directly due to whitelist\\\");\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  /* ----- onlyWhitelisted ----- */\\n\\n  function stakeWithProof(uint256 amount, bytes32[] calldata proof) public\\n    override(IStakingRewardWhitelisted)\\n    onlyWhitelisted(proof)\\n    updateReward(msg.sender)\\n  {\\n    require(\\n      balanceOf(msg.sender).add(amount) <= maximumContribution,\\n      \\\"Phase1Pool::stake: Cannot exceed maximum contribution\\\"\\n    );\\n\\n    super.stake(amount);\\n  }\\n}\\n\",\"keccak256\":\"0xee0efa5453a3364c5abacc8507098b14ec12d484bc14e59193b66ee24c671fc0\",\"license\":\"MIT\"},\"contracts/Phase2Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"synthetix/contracts/interfaces/IStakingRewards.sol\\\";\\n\\nimport \\\"./RewardDistributionRecipient.sol\\\";\\n\\n/**\\n  @title Phase 2 BANK Reward Pool for Float Protocol\\n  @notice This contract is used to reward `rewardToken` when `stakeToken` is staked.\\n */\\ncontract Phase2Pool is IStakingRewards, Context, AccessControl, RewardDistributionRecipient, ReentrancyGuard {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /* ========== CONSTANTS ========== */\\n  uint256 public constant DURATION = 7 days;\\n  bytes32 public constant RECOVER_ROLE = keccak256(\\\"RECOVER_ROLE\\\");\\n\\n  /* ========== STATE VARIABLES ========== */\\n  IERC20 public rewardToken;\\n  IERC20 public stakeToken;\\n\\n  uint256 public periodFinish = 0;\\n  uint256 public rewardRate = 0;\\n  uint256 public lastUpdateTime;\\n  uint256 public rewardPerTokenStored;\\n\\n  mapping(address => uint256) public userRewardPerTokenPaid;\\n  mapping(address => uint256) public rewards;\\n\\n  uint256 private _totalSupply;\\n  mapping(address => uint256) private _balances;\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  /**\\n    @notice Construct a new Phase2Pool\\n    @param _admin The default role controller for \\n    @param _rewardDistribution The reward distributor (can change reward rate)\\n    @param _rewardToken The reward token to distribute\\n    @param _stakingToken The staking token used to qualify for rewards\\n   */\\n  constructor(\\n    address _admin,\\n    address _rewardDistribution,\\n    address _rewardToken,\\n    address _stakingToken\\n  ) RewardDistributionRecipient(_admin) {\\n    rewardDistribution = _rewardDistribution;\\n    rewardToken = IERC20(_rewardToken);\\n    stakeToken = IERC20(_stakingToken);\\n    \\n    _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n    _setupRole(RECOVER_ROLE, _admin);\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  event RewardAdded(uint256 reward);\\n  event Staked(address indexed user, uint256 amount);\\n  event Withdrawn(address indexed user, uint256 amount);\\n  event RewardPaid(address indexed user, uint256 reward);\\n  event Recovered(address token, uint256 amount);\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier updateReward(address account) {\\n    rewardPerTokenStored = rewardPerToken();\\n    lastUpdateTime = lastTimeRewardApplicable();\\n    if (account != address(0)) {\\n      rewards[account] = earned(account);\\n      userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n    }\\n    _;\\n  }\\n\\n  /* ========== VIEWS ========== */\\n\\n  function totalSupply() public override(IStakingRewards) view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address account) public override(IStakingRewards) view returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  function lastTimeRewardApplicable() public override(IStakingRewards) view returns (uint256) {\\n    return Math.min(block.timestamp, periodFinish);\\n  }\\n\\n  function rewardPerToken() public override(IStakingRewards) view returns (uint256) {\\n    if (totalSupply() == 0) {\\n      return rewardPerTokenStored;\\n    }\\n\\n    return\\n      rewardPerTokenStored.add(\\n        lastTimeRewardApplicable()\\n          .sub(lastUpdateTime)\\n          .mul(rewardRate)\\n          .mul(1e18)\\n          .div(totalSupply())\\n      );\\n  }\\n\\n  function earned(address account) public override(IStakingRewards) view returns (uint256) {\\n    return\\n      balanceOf(account)\\n        .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n        .div(1e18)\\n        .add(rewards[account]);\\n  }\\n\\n  function getRewardForDuration() external override(IStakingRewards) view returns (uint256) {\\n    return rewardRate.mul(DURATION);\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n  function stake(uint256 amount) public virtual override(IStakingRewards) updateReward(msg.sender) {\\n    require(amount > 0, \\\"Phase2Pool::stake: Cannot stake 0\\\");\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[msg.sender] = _balances[msg.sender].add(amount);\\n\\n    stakeToken.safeTransferFrom(msg.sender, address(this), amount);\\n    emit Staked(msg.sender, amount);\\n  }\\n\\n  function withdraw(uint256 amount) public override(IStakingRewards) updateReward(msg.sender) {\\n    require(amount > 0, \\\"Phase2Pool::withdraw: Cannot withdraw 0\\\");\\n    _totalSupply = _totalSupply.sub(amount);\\n    _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n    stakeToken.safeTransfer(msg.sender, amount);\\n    emit Withdrawn(msg.sender, amount);\\n  }\\n\\n  function exit() external override(IStakingRewards) {\\n    withdraw(balanceOf(msg.sender));\\n    getReward();\\n  }\\n\\n  function getReward() public virtual override(IStakingRewards) updateReward(msg.sender) {\\n    uint256 reward = earned(msg.sender);\\n    if (reward > 0) {\\n      rewards[msg.sender] = 0;\\n      rewardToken.safeTransfer(msg.sender, reward);\\n      emit RewardPaid(msg.sender, reward);\\n    }\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  /* ----- Reward Distributor ----- */\\n\\n  /**\\n    @notice Should be called after the amount of reward tokens has\\n     been sent to the contract.\\n     Reward should be divisible by duration.\\n    @param reward number of tokens to be distributed over the duration.\\n   */\\n  function notifyRewardAmount(uint256 reward)\\n    external\\n    override\\n    onlyRewardDistribution\\n    updateReward(address(0))\\n  {\\n    if (block.timestamp >= periodFinish) {\\n      rewardRate = reward.div(DURATION);\\n    } else {\\n      uint256 remaining = periodFinish.sub(block.timestamp);\\n      uint256 leftover = remaining.mul(rewardRate);\\n      rewardRate = reward.add(leftover).div(DURATION);\\n    }\\n\\n    // Ensure provided reward amount is not more than the balance in the contract.\\n    // Keeps reward rate within the right range to prevent overflows in earned or rewardsPerToken\\n    // Reward + leftover < 1e18\\n    uint256 balance = rewardToken.balanceOf(address(this));\\n    require(\\n      rewardRate <= balance.div(DURATION), \\n      \\\"Phase2Pool::notifyRewardAmount: Insufficent balance for reward rate\\\"\\n    );\\n\\n    lastUpdateTime = block.timestamp;\\n    periodFinish = block.timestamp.add(DURATION);\\n    emit RewardAdded(reward);\\n  }\\n\\n  /* ----- RECOVER_ROLE ----- */\\n\\n  /**\\n    @notice Provide accidental token retrieval. \\n    @dev Sourced from synthetix/contracts/StakingRewards.sol\\n   */\\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external {\\n    require(\\n      hasRole(RECOVER_ROLE, _msgSender()), \\n      \\\"Phase2Pool::recoverERC20: You must possess the recover role to recover erc20\\\"\\n    );\\n    require(\\n      tokenAddress != address(stakeToken), \\n      \\\"Phase2Pool::recoverERC20: Cannot recover the staking token\\\"\\n    );\\n    require(\\n      tokenAddress != address(rewardToken), \\n      \\\"Phase2Pool::recoverERC20: Cannot recover the reward token\\\"\\n    );\\n\\n    IERC20(tokenAddress).safeTransfer(_msgSender(), tokenAmount);\\n    emit Recovered(tokenAddress, tokenAmount);\\n  }\\n}\\n\",\"keccak256\":\"0x3d8165986b180b4f3ac8e828a9597861c1fce40ad68546c427e78ea3adb7d43f\",\"license\":\"MIT\"},\"contracts/RewardDistributionRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\nabstract contract RewardDistributionRecipient is Context, AccessControl {\\n    bytes32 public constant DISTRIBUTION_ASSIGNER_ROLE = keccak256(\\\"DISTRIBUTION_ASSIGNER_ROLE\\\");\\n\\n    address public rewardDistribution;\\n\\n    constructor(address assigner) {\\n        _setupRole(DISTRIBUTION_ASSIGNER_ROLE, assigner);\\n    }\\n\\n    modifier onlyRewardDistribution() {\\n        require(\\n            _msgSender() == rewardDistribution,\\n            \\\"RewardDisributionRecipient::onlyRewardDistribution: Caller is not RewardsDistribution contract\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /* ----- rewardDistribution ----- */\\n\\n    function notifyRewardAmount(uint256 reward) external virtual;\\n\\n    /* ----- DISTRIBUTION_ASSIGNER_ROLE ----- */\\n\\n    function setRewardDistribution(address _rewardDistribution)\\n        external\\n    {\\n        require(\\n            hasRole(DISTRIBUTION_ASSIGNER_ROLE, _msgSender()),\\n            \\\"RewardDistributionRecipient::setRewardDistribution: must have distribution assigner role\\\"\\n        );\\n        rewardDistribution = _rewardDistribution;\\n    }\\n}\",\"keccak256\":\"0xf284e60b6959f2c78647e209f6d55dade08014b06753c5e560c66c2858d88b65\",\"license\":\"MIT\"},\"contracts/Whitelisted.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport '@openzeppelin/contracts/GSN/Context.sol';\\n\\nimport './interfaces/IWhitelist.sol';\\n\\nabstract contract Whitelisted is Context {\\n    IWhitelist public whitelist;\\n\\n    modifier onlyWhitelisted(bytes32[] calldata proof) {\\n        require(\\n            whitelist.whitelisted(_msgSender(), proof),\\n            \\\"Whitelisted::onlyWhitelisted: Caller is not whitelisted / proof invalid\\\"\\n        );\\n        _;\\n    }\\n}\",\"keccak256\":\"0x121d87303855a3b88ae145e2e084cabc2c980a8a2713eabcbe63d1f1ffaf2932\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingRewardWhitelisted.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"synthetix/contracts/interfaces/IStakingRewards.sol\\\";\\n\\ninterface IStakingRewardWhitelisted is IStakingRewards {\\n  function stakeWithProof(uint256 amount, bytes32[] calldata proof) external;\\n}\\n\",\"keccak256\":\"0x029d1389e5952f98072643ad0a7bd9da6382219fba0ed76930312014e8c40c29\",\"license\":\"MIT\"},\"contracts/interfaces/IWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.2;\\n\\ninterface IWhitelist {\\n  // Views\\n  function root() external view returns (bytes32);\\n  function uri() external view returns (string memory);\\n  function whitelisted(address account, bytes32[] memory proof) external view returns (bool);\\n\\n  // Mutative\\n  function updateWhitelist(bytes32 _root, string memory _uri) external; \\n}\",\"keccak256\":\"0x9f9cc53c4c0997503abd4e427573ae2b8c25cd55893c7de757e5599eb044e8ee\",\"license\":\"MIT\"},\"synthetix/contracts/interfaces/IStakingRewards.sol\":{\"content\":\"pragma solidity >=0.4.24;\\n\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\\ninterface IStakingRewards {\\n    // Views\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getRewardForDuration() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    // Mutative\\n\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function getReward() external;\\n\\n    function exit() external;\\n}\\n\",\"keccak256\":\"0xf471d7cdb25a9057761e3474c6e9b466bd40052e00674ec8e1037bda451e83a5\"}},\"version\":1}",
  "bytecode": "0x6080604052600060055560006006553480156200001b57600080fd5b506040516200275e3803806200275e833981810160405260c08110156200004157600080fd5b508051602082015160408301516060840151608085015160a09095015193949293919290918585848483620000977f32d611cddb9575a9b749d29624cab333eb23b65b17d0995589b5ce4fba0af7878262000146565b506001600281905580546001600160a01b038086166001600160a01b031992831617909255600380548584169083161790556004805492841692909116919091179055620000e760008562000146565b620001137f62b337eaefec74dadf1a62e856bf9db4f14a0f27d4f48156a95a9f98e7d5e0668562000146565b5050600d80546001600160a01b0319166001600160a01b03979097169690961790955550600e55506200025a9350505050565b62000152828262000156565b5050565b6000828152602081815260409091206200017b91839062001511620001cf821b17901c565b1562000152576200018b620001ef565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001e6836001600160a01b038416620001f3565b90505b92915050565b3390565b600062000201838362000242565b6200023957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001e9565b506000620001e9565b60009081526001919091016020526040902054151590565b6124f4806200026a6000396000f3fe608060405234801561001057600080fd5b506004361061025b5760003560e01c80638b87634711610145578063c8f33c91116100bd578063d547741f1161008c578063e9fad8ee11610071578063e9fad8ee14610678578063ebe2b12b14610680578063f7c618c1146106885761025b565b8063d547741f14610637578063df136d65146106705761025b565b8063c8f33c9114610602578063ca15c8731461060a578063cd3daf9d14610627578063d2ef3d0f1461062f5761025b565b806393e59dc1116101145780639c2fcd45116100f95780639c2fcd45146105d5578063a217fddf146105dd578063a694fc3a146105e55761025b565b806393e59dc1146105565780639c1298a01461055e5761025b565b80638b876347146104ab5780639010d07c146104de57806391d1485414610501578063939bcbc91461054e5761025b565b80632f2ff15d116101d857806351ed6a30116101a75780637b0a47ee1161018c5780637b0a47ee1461046257806380faa57d1461046a5780638980f11f146104725761025b565b806351ed6a301461042757806370a082311461042f5761025b565b80632f2ff15d1461039057806336568abe146103c95780633c6b16ab146104025780633d18b9121461041f5761025b565b806318160ddd1161022f5780631c1f78eb116102145780631c1f78eb1461034e578063248a9ca3146103565780632e1a7d4d146103735761025b565b806318160ddd1461033e5780631be05289146103465761025b565b80628cc262146102605780630700037d146102a55780630d68b761146102d8578063101114cf1461030d575b600080fd5b6102936004803603602081101561027657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610690565b60408051918252519081900360200190f35b610293600480360360208110156102bb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661070b565b61030b600480360360208110156102ee57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661071d565b005b6103156107ea565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610293610806565b61029361080d565b610293610814565b6102936004803603602081101561036c57600080fd5b503561082c565b61030b6004803603602081101561038957600080fd5b5035610841565b61030b600480360360408110156103a657600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff166109ac565b61030b600480360360408110156103df57600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff16610a2d565b61030b6004803603602081101561041857600080fd5b5035610ac2565b61030b610d79565b610315610e71565b6102936004803603602081101561044557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e8d565b610293610eb5565b610293610ebb565b61030b6004803603604081101561048857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610ec9565b610293600480360360208110156104c157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166110b0565b610315600480360360408110156104f457600080fd5b50803590602001356110c2565b61053a6004803603604081101561051757600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff166110e1565b604080519115158252519081900360200190f35b6102936110f9565b61031561111d565b61030b6004803603604081101561057457600080fd5b8135919081019060408101602082013564010000000081111561059657600080fd5b8201836020820111156105a857600080fd5b803590602001918460208302840111640100000000831117156105ca57600080fd5b509092509050611139565b610293611370565b610293611376565b61030b600480360360208110156105fb57600080fd5b503561137b565b6102936113cc565b6102936004803603602081101561062057600080fd5b50356113d2565b6102936113e9565b610293611437565b61030b6004803603604081101561064d57600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff1661145b565b6102936114ce565b61030b6114d4565b6102936114ef565b6103156114f5565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600a6020908152604080832054600990925282205461070591906106ff90670de0b6b3a7640000906106f9906106ea906106e46113e9565b90611533565b6106f388610e8d565b90611575565b906115e8565b9061162a565b92915050565b600a6020526000908152604090205481565b61074e7f32d611cddb9575a9b749d29624cab333eb23b65b17d0995589b5ce4fba0af78761074961169e565b6110e1565b6107a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260588152602001806121886058913960600191505060405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600b545b90565b62093a8081565b6006546000906108279062093a80611575565b905090565b60009081526020819052604090206002015490565b3361084a6113e9565b600855610855610ebb565b60075573ffffffffffffffffffffffffffffffffffffffff8116156108b65761087d81610690565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556008546009909152919020555b6000821161090f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806121616027913960400191505060405180910390fd5b600b5461091c9083611533565b600b55336000908152600c60205260409020546109399083611533565b336000818152600c60205260409020919091556004546109729173ffffffffffffffffffffffffffffffffffffffff90911690846116a2565b60408051838152905133917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a25050565b6000828152602081905260409020600201546109ca9061074961169e565b610a1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806120fd602f913960400191505060405180910390fd5b610a298282611734565b5050565b610a3561169e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ab8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612490602f913960400191505060405180910390fd5b610a2982826117b7565b60015473ffffffffffffffffffffffffffffffffffffffff16610ae361169e565b73ffffffffffffffffffffffffffffffffffffffff1614610b4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252605e815260200180612354605e913960600191505060405180910390fd5b6000610b596113e9565b600855610b64610ebb565b60075573ffffffffffffffffffffffffffffffffffffffff811615610bc557610b8c81610690565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556008546009909152919020555b6005544210610be357610bdb8262093a806115e8565b600655610c25565b600554600090610bf39042611533565b90506000610c0c6006548361157590919063ffffffff16565b9050610c1f62093a806106f9868461162a565b60065550505b600354604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b158015610c9657600080fd5b505afa158015610caa573d6000803e3d6000fd5b505050506040513d6020811015610cc057600080fd5b50519050610cd18162093a806115e8565b6006541115610d2b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260438152602001806122b66043913960600191505060405180910390fd5b426007819055610d3e9062093a8061162a565b6005556040805184815290517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9181900360200190a1505050565b33610d826113e9565b600855610d8d610ebb565b60075573ffffffffffffffffffffffffffffffffffffffff811615610dee57610db581610690565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556008546009909152919020555b6000610df933610690565b90508015610a2957336000818152600a6020526040812055600354610e379173ffffffffffffffffffffffffffffffffffffffff90911690836116a2565b60408051828152905133917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25050565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff166000908152600c602052604090205490565b60065481565b60006108274260055461183a565b610ef57f62b337eaefec74dadf1a62e856bf9db4f14a0f27d4f48156a95a9f98e7d5e06661074961169e565b610f4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604c8152602001806123b2604c913960600191505060405180910390fd5b60045473ffffffffffffffffffffffffffffffffffffffff83811691161415610fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a8152602001806122f9603a913960400191505060405180910390fd5b60035473ffffffffffffffffffffffffffffffffffffffff83811691161415611032576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603981526020018061227d6039913960400191505060405180910390fd5b61105b61103d61169e565b73ffffffffffffffffffffffffffffffffffffffff841690836116a2565b6040805173ffffffffffffffffffffffffffffffffffffffff841681526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a15050565b60096020526000908152604090205481565b60008281526020819052604081206110da9083611850565b9392505050565b60008281526020819052604081206110da908361185c565b7f62b337eaefec74dadf1a62e856bf9db4f14a0f27d4f48156a95a9f98e7d5e06681565b600d5473ffffffffffffffffffffffffffffffffffffffff1681565b600d548290829073ffffffffffffffffffffffffffffffffffffffff1663e3ce411b61116361169e565b84846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925060200280828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201965060209550909350505081840390508186803b15801561120257600080fd5b505afa158015611216573d6000803e3d6000fd5b505050506040513d602081101561122c57600080fd5b5051611283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604781526020018061241f6047913960600191505060405180910390fd5b3361128c6113e9565b600855611297610ebb565b60075573ffffffffffffffffffffffffffffffffffffffff8116156112f8576112bf81610690565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556008546009909152919020555b600e54611308876106ff33610e8d565b111561135f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061212c6035913960400191505060405180910390fd5b6113688661187e565b505050505050565b600e5481565b600081565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260478152602001806122366047913960600191505060405180910390fd5b60075481565b6000818152602081905260408120610705906119ea565b60006113f3610806565b611400575060085461080a565b61082761142e61140e610806565b6106f9670de0b6b3a76400006106f36006546106f36007546106e4610ebb565b6008549061162a565b7f32d611cddb9575a9b749d29624cab333eb23b65b17d0995589b5ce4fba0af78781565b6000828152602081905260409020600201546114799061074961169e565b610ab8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806122066030913960400191505060405180910390fd5b60085481565b6114e56114e033610e8d565b610841565b6114ed610d79565b565b60055481565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60006110da8373ffffffffffffffffffffffffffffffffffffffff84166119f5565b60006110da83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611a3f565b60008261158457506000610705565b8282028284828161159157fe5b04146110da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806123336021913960400191505060405180910390fd5b60006110da83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611af0565b6000828201838110156110da57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261172f908490611b6f565b505050565b600082815260208190526040902061174c9082611511565b15610a295761175961169e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020819052604090206117cf9082611c47565b15610a29576117dc61169e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600081831061184957816110da565b5090919050565b60006110da8383611c69565b60006110da8373ffffffffffffffffffffffffffffffffffffffff8416611ce7565b336118876113e9565b600855611892610ebb565b60075573ffffffffffffffffffffffffffffffffffffffff8116156118f3576118ba81610690565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556008546009909152919020555b6000821161194c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806123fe6021913960400191505060405180910390fd5b600b54611959908361162a565b600b55336000908152600c6020526040902054611976908361162a565b336000818152600c60205260409020919091556004546119b09173ffffffffffffffffffffffffffffffffffffffff909116903085611cff565b60408051838152905133917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a25050565b600061070582611d9a565b6000611a018383611ce7565b611a3757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610705565b506000610705565b60008184841115611ae8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611aad578181015183820152602001611a95565b50505050905090810190601f168015611ada5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183611b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152835160248401528351909283926044909101919085019080838360008315611aad578181015183820152602001611a95565b506000838581611b6557fe5b0495945050505050565b6060611bd1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611d9e9092919063ffffffff16565b80519091501561172f57808060200190516020811015611bf057600080fd5b505161172f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612466602a913960400191505060405180910390fd5b60006110da8373ffffffffffffffffffffffffffffffffffffffff8416611db5565b81546000908210611cc5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806120db6022913960400191505060405180910390fd5b826000018281548110611cd457fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611d94908590611b6f565b50505050565b5490565b6060611dad8484600085611e99565b949350505050565b60008181526001830160205260408120548015611e8f5783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8083019190810190600090879083908110611e0657fe5b9060005260206000200154905080876000018481548110611e2357fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611e5357fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610705565b6000915050610705565b606082471015611ef4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806121e06026913960400191505060405180910390fd5b611efd85612054565b611f6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310611fd257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611f95565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612034576040519150601f19603f3d011682016040523d82523d6000602084013e612039565b606091505b509150915061204982828661205a565b979650505050505050565b3b151590565b606083156120695750816110da565b8251156120795782518084602001fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152845160248401528451859391928392604401919085019080838360008315611aad578181015183820152602001611a9556fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74506861736531506f6f6c3a3a7374616b653a2043616e6e6f7420657863656564206d6178696d756d20636f6e747269627574696f6e506861736532506f6f6c3a3a77697468647261773a2043616e6e6f742077697468647261772030526577617264446973747269627574696f6e526563697069656e743a3a736574526577617264446973747269627574696f6e3a206d757374206861766520646973747269627574696f6e2061737369676e657220726f6c65416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65506861736531506f6f6c3a3a7374616b653a2043616e6e6f74207374616b65206f6e20506861736531506f6f6c206469726563746c792064756520746f2077686974656c697374506861736532506f6f6c3a3a7265636f76657245524332303a2043616e6e6f74207265636f766572207468652072657761726420746f6b656e506861736532506f6f6c3a3a6e6f74696679526577617264416d6f756e743a20496e737566666963656e742062616c616e636520666f72207265776172642072617465506861736532506f6f6c3a3a7265636f76657245524332303a2043616e6e6f74207265636f76657220746865207374616b696e6720746f6b656e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775265776172644469737269627574696f6e526563697069656e743a3a6f6e6c79526577617264446973747269627574696f6e3a2043616c6c6572206973206e6f742052657761726473446973747269627574696f6e20636f6e7472616374506861736532506f6f6c3a3a7265636f76657245524332303a20596f75206d75737420706f737365737320746865207265636f76657220726f6c6520746f207265636f766572206572633230506861736532506f6f6c3a3a7374616b653a2043616e6e6f74207374616b65203057686974656c69737465643a3a6f6e6c7957686974656c69737465643a2043616c6c6572206973206e6f742077686974656c6973746564202f2070726f6f6620696e76616c69645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a26469706673582212204c9c8ae8435162c06d82722ca2d71bd43c30d3a3b114cc05c52c0e413a317ea364736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025b5760003560e01c80638b87634711610145578063c8f33c91116100bd578063d547741f1161008c578063e9fad8ee11610071578063e9fad8ee14610678578063ebe2b12b14610680578063f7c618c1146106885761025b565b8063d547741f14610637578063df136d65146106705761025b565b8063c8f33c9114610602578063ca15c8731461060a578063cd3daf9d14610627578063d2ef3d0f1461062f5761025b565b806393e59dc1116101145780639c2fcd45116100f95780639c2fcd45146105d5578063a217fddf146105dd578063a694fc3a146105e55761025b565b806393e59dc1146105565780639c1298a01461055e5761025b565b80638b876347146104ab5780639010d07c146104de57806391d1485414610501578063939bcbc91461054e5761025b565b80632f2ff15d116101d857806351ed6a30116101a75780637b0a47ee1161018c5780637b0a47ee1461046257806380faa57d1461046a5780638980f11f146104725761025b565b806351ed6a301461042757806370a082311461042f5761025b565b80632f2ff15d1461039057806336568abe146103c95780633c6b16ab146104025780633d18b9121461041f5761025b565b806318160ddd1161022f5780631c1f78eb116102145780631c1f78eb1461034e578063248a9ca3146103565780632e1a7d4d146103735761025b565b806318160ddd1461033e5780631be05289146103465761025b565b80628cc262146102605780630700037d146102a55780630d68b761146102d8578063101114cf1461030d575b600080fd5b6102936004803603602081101561027657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610690565b60408051918252519081900360200190f35b610293600480360360208110156102bb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661070b565b61030b600480360360208110156102ee57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661071d565b005b6103156107ea565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610293610806565b61029361080d565b610293610814565b6102936004803603602081101561036c57600080fd5b503561082c565b61030b6004803603602081101561038957600080fd5b5035610841565b61030b600480360360408110156103a657600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff166109ac565b61030b600480360360408110156103df57600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff16610a2d565b61030b6004803603602081101561041857600080fd5b5035610ac2565b61030b610d79565b610315610e71565b6102936004803603602081101561044557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e8d565b610293610eb5565b610293610ebb565b61030b6004803603604081101561048857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610ec9565b610293600480360360208110156104c157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166110b0565b610315600480360360408110156104f457600080fd5b50803590602001356110c2565b61053a6004803603604081101561051757600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff166110e1565b604080519115158252519081900360200190f35b6102936110f9565b61031561111d565b61030b6004803603604081101561057457600080fd5b8135919081019060408101602082013564010000000081111561059657600080fd5b8201836020820111156105a857600080fd5b803590602001918460208302840111640100000000831117156105ca57600080fd5b509092509050611139565b610293611370565b610293611376565b61030b600480360360208110156105fb57600080fd5b503561137b565b6102936113cc565b6102936004803603602081101561062057600080fd5b50356113d2565b6102936113e9565b610293611437565b61030b6004803603604081101561064d57600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff1661145b565b6102936114ce565b61030b6114d4565b6102936114ef565b6103156114f5565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600a6020908152604080832054600990925282205461070591906106ff90670de0b6b3a7640000906106f9906106ea906106e46113e9565b90611533565b6106f388610e8d565b90611575565b906115e8565b9061162a565b92915050565b600a6020526000908152604090205481565b61074e7f32d611cddb9575a9b749d29624cab333eb23b65b17d0995589b5ce4fba0af78761074961169e565b6110e1565b6107a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260588152602001806121886058913960600191505060405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600b545b90565b62093a8081565b6006546000906108279062093a80611575565b905090565b60009081526020819052604090206002015490565b3361084a6113e9565b600855610855610ebb565b60075573ffffffffffffffffffffffffffffffffffffffff8116156108b65761087d81610690565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556008546009909152919020555b6000821161090f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806121616027913960400191505060405180910390fd5b600b5461091c9083611533565b600b55336000908152600c60205260409020546109399083611533565b336000818152600c60205260409020919091556004546109729173ffffffffffffffffffffffffffffffffffffffff90911690846116a2565b60408051838152905133917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a25050565b6000828152602081905260409020600201546109ca9061074961169e565b610a1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806120fd602f913960400191505060405180910390fd5b610a298282611734565b5050565b610a3561169e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ab8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612490602f913960400191505060405180910390fd5b610a2982826117b7565b60015473ffffffffffffffffffffffffffffffffffffffff16610ae361169e565b73ffffffffffffffffffffffffffffffffffffffff1614610b4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252605e815260200180612354605e913960600191505060405180910390fd5b6000610b596113e9565b600855610b64610ebb565b60075573ffffffffffffffffffffffffffffffffffffffff811615610bc557610b8c81610690565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556008546009909152919020555b6005544210610be357610bdb8262093a806115e8565b600655610c25565b600554600090610bf39042611533565b90506000610c0c6006548361157590919063ffffffff16565b9050610c1f62093a806106f9868461162a565b60065550505b600354604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b158015610c9657600080fd5b505afa158015610caa573d6000803e3d6000fd5b505050506040513d6020811015610cc057600080fd5b50519050610cd18162093a806115e8565b6006541115610d2b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260438152602001806122b66043913960600191505060405180910390fd5b426007819055610d3e9062093a8061162a565b6005556040805184815290517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9181900360200190a1505050565b33610d826113e9565b600855610d8d610ebb565b60075573ffffffffffffffffffffffffffffffffffffffff811615610dee57610db581610690565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556008546009909152919020555b6000610df933610690565b90508015610a2957336000818152600a6020526040812055600354610e379173ffffffffffffffffffffffffffffffffffffffff90911690836116a2565b60408051828152905133917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25050565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff166000908152600c602052604090205490565b60065481565b60006108274260055461183a565b610ef57f62b337eaefec74dadf1a62e856bf9db4f14a0f27d4f48156a95a9f98e7d5e06661074961169e565b610f4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604c8152602001806123b2604c913960600191505060405180910390fd5b60045473ffffffffffffffffffffffffffffffffffffffff83811691161415610fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a8152602001806122f9603a913960400191505060405180910390fd5b60035473ffffffffffffffffffffffffffffffffffffffff83811691161415611032576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603981526020018061227d6039913960400191505060405180910390fd5b61105b61103d61169e565b73ffffffffffffffffffffffffffffffffffffffff841690836116a2565b6040805173ffffffffffffffffffffffffffffffffffffffff841681526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a15050565b60096020526000908152604090205481565b60008281526020819052604081206110da9083611850565b9392505050565b60008281526020819052604081206110da908361185c565b7f62b337eaefec74dadf1a62e856bf9db4f14a0f27d4f48156a95a9f98e7d5e06681565b600d5473ffffffffffffffffffffffffffffffffffffffff1681565b600d548290829073ffffffffffffffffffffffffffffffffffffffff1663e3ce411b61116361169e565b84846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925060200280828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201965060209550909350505081840390508186803b15801561120257600080fd5b505afa158015611216573d6000803e3d6000fd5b505050506040513d602081101561122c57600080fd5b5051611283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604781526020018061241f6047913960600191505060405180910390fd5b3361128c6113e9565b600855611297610ebb565b60075573ffffffffffffffffffffffffffffffffffffffff8116156112f8576112bf81610690565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556008546009909152919020555b600e54611308876106ff33610e8d565b111561135f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061212c6035913960400191505060405180910390fd5b6113688661187e565b505050505050565b600e5481565b600081565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260478152602001806122366047913960600191505060405180910390fd5b60075481565b6000818152602081905260408120610705906119ea565b60006113f3610806565b611400575060085461080a565b61082761142e61140e610806565b6106f9670de0b6b3a76400006106f36006546106f36007546106e4610ebb565b6008549061162a565b7f32d611cddb9575a9b749d29624cab333eb23b65b17d0995589b5ce4fba0af78781565b6000828152602081905260409020600201546114799061074961169e565b610ab8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806122066030913960400191505060405180910390fd5b60085481565b6114e56114e033610e8d565b610841565b6114ed610d79565b565b60055481565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60006110da8373ffffffffffffffffffffffffffffffffffffffff84166119f5565b60006110da83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611a3f565b60008261158457506000610705565b8282028284828161159157fe5b04146110da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806123336021913960400191505060405180910390fd5b60006110da83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611af0565b6000828201838110156110da57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261172f908490611b6f565b505050565b600082815260208190526040902061174c9082611511565b15610a295761175961169e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020819052604090206117cf9082611c47565b15610a29576117dc61169e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600081831061184957816110da565b5090919050565b60006110da8383611c69565b60006110da8373ffffffffffffffffffffffffffffffffffffffff8416611ce7565b336118876113e9565b600855611892610ebb565b60075573ffffffffffffffffffffffffffffffffffffffff8116156118f3576118ba81610690565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556008546009909152919020555b6000821161194c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806123fe6021913960400191505060405180910390fd5b600b54611959908361162a565b600b55336000908152600c6020526040902054611976908361162a565b336000818152600c60205260409020919091556004546119b09173ffffffffffffffffffffffffffffffffffffffff909116903085611cff565b60408051838152905133917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a25050565b600061070582611d9a565b6000611a018383611ce7565b611a3757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610705565b506000610705565b60008184841115611ae8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611aad578181015183820152602001611a95565b50505050905090810190601f168015611ada5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183611b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152835160248401528351909283926044909101919085019080838360008315611aad578181015183820152602001611a95565b506000838581611b6557fe5b0495945050505050565b6060611bd1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611d9e9092919063ffffffff16565b80519091501561172f57808060200190516020811015611bf057600080fd5b505161172f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612466602a913960400191505060405180910390fd5b60006110da8373ffffffffffffffffffffffffffffffffffffffff8416611db5565b81546000908210611cc5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806120db6022913960400191505060405180910390fd5b826000018281548110611cd457fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611d94908590611b6f565b50505050565b5490565b6060611dad8484600085611e99565b949350505050565b60008181526001830160205260408120548015611e8f5783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8083019190810190600090879083908110611e0657fe5b9060005260206000200154905080876000018481548110611e2357fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611e5357fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610705565b6000915050610705565b606082471015611ef4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806121e06026913960400191505060405180910390fd5b611efd85612054565b611f6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310611fd257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611f95565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612034576040519150601f19603f3d011682016040523d82523d6000602084013e612039565b606091505b509150915061204982828661205a565b979650505050505050565b3b151590565b606083156120695750816110da565b8251156120795782518084602001fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152845160248401528451859391928392604401919085019080838360008315611aad578181015183820152602001611a9556fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74506861736531506f6f6c3a3a7374616b653a2043616e6e6f7420657863656564206d6178696d756d20636f6e747269627574696f6e506861736532506f6f6c3a3a77697468647261773a2043616e6e6f742077697468647261772030526577617264446973747269627574696f6e526563697069656e743a3a736574526577617264446973747269627574696f6e3a206d757374206861766520646973747269627574696f6e2061737369676e657220726f6c65416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65506861736531506f6f6c3a3a7374616b653a2043616e6e6f74207374616b65206f6e20506861736531506f6f6c206469726563746c792064756520746f2077686974656c697374506861736532506f6f6c3a3a7265636f76657245524332303a2043616e6e6f74207265636f766572207468652072657761726420746f6b656e506861736532506f6f6c3a3a6e6f74696679526577617264416d6f756e743a20496e737566666963656e742062616c616e636520666f72207265776172642072617465506861736532506f6f6c3a3a7265636f76657245524332303a2043616e6e6f74207265636f76657220746865207374616b696e6720746f6b656e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775265776172644469737269627574696f6e526563697069656e743a3a6f6e6c79526577617264446973747269627574696f6e3a2043616c6c6572206973206e6f742052657761726473446973747269627574696f6e20636f6e7472616374506861736532506f6f6c3a3a7265636f76657245524332303a20596f75206d75737420706f737365737320746865207265636f76657220726f6c6520746f207265636f766572206572633230506861736532506f6f6c3a3a7374616b653a2043616e6e6f74207374616b65203057686974656c69737465643a3a6f6e6c7957686974656c69737465643a2043616c6c6572206973206e6f742077686974656c6973746564202f2070726f6f6620696e76616c69645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a26469706673582212204c9c8ae8435162c06d82722ca2d71bd43c30d3a3b114cc05c52c0e413a317ea364736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_admin": "The default role controller for ",
          "_maximumContribution": "The maximum contribution for this token (in the unit of the respective contract)",
          "_rewardDistribution": "The reward distributor (can change reward rate)",
          "_rewardToken": "The reward token to distribute",
          "_stakingToken": "The staking token used to qualify for rewards",
          "_whitelist": "The address of the deployed whitelist contract"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "notifyRewardAmount(uint256)": {
        "params": {
          "reward": "number of tokens to be distributed over the duration."
        }
      },
      "recoverERC20(address,uint256)": {
        "details": "Sourced from synthetix/contracts/StakingRewards.sol"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Construct a new Phase1Pool"
      },
      "notifyRewardAmount(uint256)": {
        "notice": "Should be called after the amount of reward tokens has been sent to the contract. Reward should be divisible by duration."
      },
      "recoverERC20(address,uint256)": {
        "notice": "Provide accidental token retrieval. "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 45,
        "contract": "contracts/Phase1Pool.sol:Phase1Pool",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)41_storage)"
      },
      {
        "astId": 3255,
        "contract": "contracts/Phase1Pool.sol:Phase1Pool",
        "label": "rewardDistribution",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2289,
        "contract": "contracts/Phase1Pool.sol:Phase1Pool",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2674,
        "contract": "contracts/Phase1Pool.sol:Phase1Pool",
        "label": "rewardToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)1251"
      },
      {
        "astId": 2676,
        "contract": "contracts/Phase1Pool.sol:Phase1Pool",
        "label": "stakeToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)1251"
      },
      {
        "astId": 2679,
        "contract": "contracts/Phase1Pool.sol:Phase1Pool",
        "label": "periodFinish",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2682,
        "contract": "contracts/Phase1Pool.sol:Phase1Pool",
        "label": "rewardRate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2684,
        "contract": "contracts/Phase1Pool.sol:Phase1Pool",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2686,
        "contract": "contracts/Phase1Pool.sol:Phase1Pool",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2690,
        "contract": "contracts/Phase1Pool.sol:Phase1Pool",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2694,
        "contract": "contracts/Phase1Pool.sol:Phase1Pool",
        "label": "rewards",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2696,
        "contract": "contracts/Phase1Pool.sol:Phase1Pool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2700,
        "contract": "contracts/Phase1Pool.sol:Phase1Pool",
        "label": "_balances",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3770,
        "contract": "contracts/Phase1Pool.sol:Phase1Pool",
        "label": "whitelist",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IWhitelist)3832"
      },
      {
        "astId": 2552,
        "contract": "contracts/Phase1Pool.sol:Phase1Pool",
        "label": "maximumContribution",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1251": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IWhitelist)3832": {
        "encoding": "inplace",
        "label": "contract IWhitelist",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)41_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)41_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1984_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1983,
            "contract": "contracts/Phase1Pool.sol:Phase1Pool",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1719_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)41_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 38,
            "contract": "contracts/Phase1Pool.sol:Phase1Pool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)1984_storage"
          },
          {
            "astId": 40,
            "contract": "contracts/Phase1Pool.sol:Phase1Pool",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1719_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1714,
            "contract": "contracts/Phase1Pool.sol:Phase1Pool",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1718,
            "contract": "contracts/Phase1Pool.sol:Phase1Pool",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}